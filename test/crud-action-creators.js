// c. Action Creators – ModelName.(verb + State) : MyModel.(create | createSuccess)()
//     = verbs – create, read, update, delete
//     = states – Success, Failure
// d. State name – model name
// e. Selectors – all selectors begin with “get”
// = verbs – get (optional getOne), getIds, getCount

import actionCreatorsFactory from "../crud-action-creators";
var assert = require("assert");
var sinon = require("sinon");
import * as _ from "ramda";

describe("CRUD Action Creators", () => {
  describe("The module must expose a factory function, that creates the action creators for a model", function() {
    it("The module should default export a function", () => {
      assert.equal(typeof actionCreatorsFactory, "function");
    });
  });

  describe("The module factory function must require 'actionTypes', 'restApi' and 'store' as arguments", function() {
    it("'actionTypes' must be required", () => {
      assert.throws(function() {
        actionCreatorsFactory(null, {}, {});
      });
    });

    it("'restApi' must be required", () => {
      assert.throws(function() {
        actionCreatorsFactory({}, null, {});
      });
    });

    it("'store' must be required", () => {
      assert.throws(function() {
        actionCreatorsFactory({}, {}, null);
      });
    });
  });

  describe("The factory function must return an object with the action creators", function() {
    it("returns an object", () => {
      let actionCreators = actionCreatorsFactory({}, {}, {});
      assert.equal(typeof actionCreators, "object");
    });

    it("returns a non-empty object", () => {
      let actionCreators = actionCreatorsFactory({}, {}, {});
      assert.equal(_.isEmpty(actionCreators), false);
    });

    describe("The factory function must return an object with all non-stateful action creators", function() {
      const propNotFound = " property was not found";

      ["create", "read", "update", "delete"].forEach(crudAct => {
        it(`returns an object with a '${crudAct}' function`, () => {
          let actionCreators = actionCreatorsFactory({}, {}, {});
          assert.equal(
            _.has(crudAct, actionCreators),
            true,
            `${crudAct} ${propNotFound}`
          );
          assert.equal(typeof actionCreators[crudAct], "function");
        });
      });
    });
  });

  describe("[THUNK-SPECIFIC] All crud thunks must dispatch an initial action, and a result action", function() {
    // {
    //     type: ModuleName/SOME_ACTION (+ STATE),
    //         error: null | Object,
    //     payload? : any,
    //     meta: {
    // @@autogenerated: boolean,
    //         module: some string,
    //         action: SOME_ACTION,
    //         state: SUCCESS/ERROR
    // }
    //
    // }
    describe("[THUNK-SPECIFIC] All crud thunks dispatch an initial action", function() {
      ["create", "read", "update", "delete"].forEach(crudAct => {
        it(crudAct + ` dispatches an initial action right away`, () => {
          let store = { dispatch() {} };
          let actionCreators = actionCreatorsFactory({}, {}, store);

          var spy = sinon.spy(store, "dispatch");
          actionCreators[crudAct]();
          assert.equal(_.has("type", action), true, "'type' is required");
        });
      });
    });
  });
});
